// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/devshark/alchemy-fleet/domain"
	mock "github.com/stretchr/testify/mock"
)

// Spacecraft is an autogenerated mock type for the Spacecraft type
type Spacecraft struct {
	mock.Mock
}

type Spacecraft_Expecter struct {
	mock *mock.Mock
}

func (_m *Spacecraft) EXPECT() *Spacecraft_Expecter {
	return &Spacecraft_Expecter{mock: &_m.Mock}
}

// CreateSpacecraft provides a mock function with given fields: ctx, spacecraft
func (_m *Spacecraft) CreateSpacecraft(ctx context.Context, spacecraft *domain.Spacecraft) (*domain.Spacecraft, error) {
	ret := _m.Called(ctx, spacecraft)

	var r0 *domain.Spacecraft
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Spacecraft) (*domain.Spacecraft, error)); ok {
		return rf(ctx, spacecraft)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Spacecraft) *domain.Spacecraft); ok {
		r0 = rf(ctx, spacecraft)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Spacecraft)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.Spacecraft) error); ok {
		r1 = rf(ctx, spacecraft)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Spacecraft_CreateSpacecraft_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSpacecraft'
type Spacecraft_CreateSpacecraft_Call struct {
	*mock.Call
}

// CreateSpacecraft is a helper method to define mock.On call
//   - ctx context.Context
//   - spacecraft *domain.Spacecraft
func (_e *Spacecraft_Expecter) CreateSpacecraft(ctx interface{}, spacecraft interface{}) *Spacecraft_CreateSpacecraft_Call {
	return &Spacecraft_CreateSpacecraft_Call{Call: _e.mock.On("CreateSpacecraft", ctx, spacecraft)}
}

func (_c *Spacecraft_CreateSpacecraft_Call) Run(run func(ctx context.Context, spacecraft *domain.Spacecraft)) *Spacecraft_CreateSpacecraft_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Spacecraft))
	})
	return _c
}

func (_c *Spacecraft_CreateSpacecraft_Call) Return(_a0 *domain.Spacecraft, _a1 error) *Spacecraft_CreateSpacecraft_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Spacecraft_CreateSpacecraft_Call) RunAndReturn(run func(context.Context, *domain.Spacecraft) (*domain.Spacecraft, error)) *Spacecraft_CreateSpacecraft_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSpacecraft provides a mock function with given fields: ctx, id
func (_m *Spacecraft) DeleteSpacecraft(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Spacecraft_DeleteSpacecraft_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSpacecraft'
type Spacecraft_DeleteSpacecraft_Call struct {
	*mock.Call
}

// DeleteSpacecraft is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *Spacecraft_Expecter) DeleteSpacecraft(ctx interface{}, id interface{}) *Spacecraft_DeleteSpacecraft_Call {
	return &Spacecraft_DeleteSpacecraft_Call{Call: _e.mock.On("DeleteSpacecraft", ctx, id)}
}

func (_c *Spacecraft_DeleteSpacecraft_Call) Run(run func(ctx context.Context, id int)) *Spacecraft_DeleteSpacecraft_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *Spacecraft_DeleteSpacecraft_Call) Return(_a0 error) *Spacecraft_DeleteSpacecraft_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Spacecraft_DeleteSpacecraft_Call) RunAndReturn(run func(context.Context, int) error) *Spacecraft_DeleteSpacecraft_Call {
	_c.Call.Return(run)
	return _c
}

// GetSpacecraft provides a mock function with given fields: ctx, id
func (_m *Spacecraft) GetSpacecraft(ctx context.Context, id int) (*domain.Spacecraft, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Spacecraft
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*domain.Spacecraft, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *domain.Spacecraft); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Spacecraft)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Spacecraft_GetSpacecraft_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSpacecraft'
type Spacecraft_GetSpacecraft_Call struct {
	*mock.Call
}

// GetSpacecraft is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *Spacecraft_Expecter) GetSpacecraft(ctx interface{}, id interface{}) *Spacecraft_GetSpacecraft_Call {
	return &Spacecraft_GetSpacecraft_Call{Call: _e.mock.On("GetSpacecraft", ctx, id)}
}

func (_c *Spacecraft_GetSpacecraft_Call) Run(run func(ctx context.Context, id int)) *Spacecraft_GetSpacecraft_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *Spacecraft_GetSpacecraft_Call) Return(_a0 *domain.Spacecraft, _a1 error) *Spacecraft_GetSpacecraft_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Spacecraft_GetSpacecraft_Call) RunAndReturn(run func(context.Context, int) (*domain.Spacecraft, error)) *Spacecraft_GetSpacecraft_Call {
	_c.Call.Return(run)
	return _c
}

// GetSpacecrafts provides a mock function with given fields: ctx, filters
func (_m *Spacecraft) GetSpacecrafts(ctx context.Context, filters domain.SpacecraftFilters) ([]*domain.Spacecraft, error) {
	ret := _m.Called(ctx, filters)

	var r0 []*domain.Spacecraft
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.SpacecraftFilters) ([]*domain.Spacecraft, error)); ok {
		return rf(ctx, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.SpacecraftFilters) []*domain.Spacecraft); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Spacecraft)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.SpacecraftFilters) error); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Spacecraft_GetSpacecrafts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSpacecrafts'
type Spacecraft_GetSpacecrafts_Call struct {
	*mock.Call
}

// GetSpacecrafts is a helper method to define mock.On call
//   - ctx context.Context
//   - filters domain.SpacecraftFilters
func (_e *Spacecraft_Expecter) GetSpacecrafts(ctx interface{}, filters interface{}) *Spacecraft_GetSpacecrafts_Call {
	return &Spacecraft_GetSpacecrafts_Call{Call: _e.mock.On("GetSpacecrafts", ctx, filters)}
}

func (_c *Spacecraft_GetSpacecrafts_Call) Run(run func(ctx context.Context, filters domain.SpacecraftFilters)) *Spacecraft_GetSpacecrafts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.SpacecraftFilters))
	})
	return _c
}

func (_c *Spacecraft_GetSpacecrafts_Call) Return(_a0 []*domain.Spacecraft, _a1 error) *Spacecraft_GetSpacecrafts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Spacecraft_GetSpacecrafts_Call) RunAndReturn(run func(context.Context, domain.SpacecraftFilters) ([]*domain.Spacecraft, error)) *Spacecraft_GetSpacecrafts_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSpacecraft provides a mock function with given fields: ctx, id, spacecraft
func (_m *Spacecraft) UpdateSpacecraft(ctx context.Context, id int, spacecraft *domain.Spacecraft) (*domain.Spacecraft, error) {
	ret := _m.Called(ctx, id, spacecraft)

	var r0 *domain.Spacecraft
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *domain.Spacecraft) (*domain.Spacecraft, error)); ok {
		return rf(ctx, id, spacecraft)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *domain.Spacecraft) *domain.Spacecraft); ok {
		r0 = rf(ctx, id, spacecraft)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Spacecraft)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *domain.Spacecraft) error); ok {
		r1 = rf(ctx, id, spacecraft)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Spacecraft_UpdateSpacecraft_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSpacecraft'
type Spacecraft_UpdateSpacecraft_Call struct {
	*mock.Call
}

// UpdateSpacecraft is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
//   - spacecraft *domain.Spacecraft
func (_e *Spacecraft_Expecter) UpdateSpacecraft(ctx interface{}, id interface{}, spacecraft interface{}) *Spacecraft_UpdateSpacecraft_Call {
	return &Spacecraft_UpdateSpacecraft_Call{Call: _e.mock.On("UpdateSpacecraft", ctx, id, spacecraft)}
}

func (_c *Spacecraft_UpdateSpacecraft_Call) Run(run func(ctx context.Context, id int, spacecraft *domain.Spacecraft)) *Spacecraft_UpdateSpacecraft_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(*domain.Spacecraft))
	})
	return _c
}

func (_c *Spacecraft_UpdateSpacecraft_Call) Return(_a0 *domain.Spacecraft, _a1 error) *Spacecraft_UpdateSpacecraft_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Spacecraft_UpdateSpacecraft_Call) RunAndReturn(run func(context.Context, int, *domain.Spacecraft) (*domain.Spacecraft, error)) *Spacecraft_UpdateSpacecraft_Call {
	_c.Call.Return(run)
	return _c
}

// NewSpacecraft creates a new instance of Spacecraft. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSpacecraft(t interface {
	mock.TestingT
	Cleanup(func())
}) *Spacecraft {
	mock := &Spacecraft{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
