// Code generated by ent, DO NOT EDIT.

package armement

import (
	"entgo.io/ent/dialect/sql"
	"github.com/devshark/alchemy-fleet/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Armement {
	return predicate.Armement(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Armement {
	return predicate.Armement(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Armement {
	return predicate.Armement(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Armement {
	return predicate.Armement(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Armement {
	return predicate.Armement(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Armement {
	return predicate.Armement(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Armement {
	return predicate.Armement(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Armement {
	return predicate.Armement(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Armement {
	return predicate.Armement(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Armement {
	return predicate.Armement(sql.FieldEQ(FieldTitle, v))
}

// Quantity applies equality check predicate on the "quantity" field. It's identical to QuantityEQ.
func Quantity(v string) predicate.Armement {
	return predicate.Armement(sql.FieldEQ(FieldQuantity, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Armement {
	return predicate.Armement(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Armement {
	return predicate.Armement(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Armement {
	return predicate.Armement(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Armement {
	return predicate.Armement(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Armement {
	return predicate.Armement(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Armement {
	return predicate.Armement(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Armement {
	return predicate.Armement(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Armement {
	return predicate.Armement(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Armement {
	return predicate.Armement(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Armement {
	return predicate.Armement(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Armement {
	return predicate.Armement(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Armement {
	return predicate.Armement(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Armement {
	return predicate.Armement(sql.FieldContainsFold(FieldTitle, v))
}

// QuantityEQ applies the EQ predicate on the "quantity" field.
func QuantityEQ(v string) predicate.Armement {
	return predicate.Armement(sql.FieldEQ(FieldQuantity, v))
}

// QuantityNEQ applies the NEQ predicate on the "quantity" field.
func QuantityNEQ(v string) predicate.Armement {
	return predicate.Armement(sql.FieldNEQ(FieldQuantity, v))
}

// QuantityIn applies the In predicate on the "quantity" field.
func QuantityIn(vs ...string) predicate.Armement {
	return predicate.Armement(sql.FieldIn(FieldQuantity, vs...))
}

// QuantityNotIn applies the NotIn predicate on the "quantity" field.
func QuantityNotIn(vs ...string) predicate.Armement {
	return predicate.Armement(sql.FieldNotIn(FieldQuantity, vs...))
}

// QuantityGT applies the GT predicate on the "quantity" field.
func QuantityGT(v string) predicate.Armement {
	return predicate.Armement(sql.FieldGT(FieldQuantity, v))
}

// QuantityGTE applies the GTE predicate on the "quantity" field.
func QuantityGTE(v string) predicate.Armement {
	return predicate.Armement(sql.FieldGTE(FieldQuantity, v))
}

// QuantityLT applies the LT predicate on the "quantity" field.
func QuantityLT(v string) predicate.Armement {
	return predicate.Armement(sql.FieldLT(FieldQuantity, v))
}

// QuantityLTE applies the LTE predicate on the "quantity" field.
func QuantityLTE(v string) predicate.Armement {
	return predicate.Armement(sql.FieldLTE(FieldQuantity, v))
}

// QuantityContains applies the Contains predicate on the "quantity" field.
func QuantityContains(v string) predicate.Armement {
	return predicate.Armement(sql.FieldContains(FieldQuantity, v))
}

// QuantityHasPrefix applies the HasPrefix predicate on the "quantity" field.
func QuantityHasPrefix(v string) predicate.Armement {
	return predicate.Armement(sql.FieldHasPrefix(FieldQuantity, v))
}

// QuantityHasSuffix applies the HasSuffix predicate on the "quantity" field.
func QuantityHasSuffix(v string) predicate.Armement {
	return predicate.Armement(sql.FieldHasSuffix(FieldQuantity, v))
}

// QuantityEqualFold applies the EqualFold predicate on the "quantity" field.
func QuantityEqualFold(v string) predicate.Armement {
	return predicate.Armement(sql.FieldEqualFold(FieldQuantity, v))
}

// QuantityContainsFold applies the ContainsFold predicate on the "quantity" field.
func QuantityContainsFold(v string) predicate.Armement {
	return predicate.Armement(sql.FieldContainsFold(FieldQuantity, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Armement) predicate.Armement {
	return predicate.Armement(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Armement) predicate.Armement {
	return predicate.Armement(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Armement) predicate.Armement {
	return predicate.Armement(sql.NotPredicates(p))
}
